diff --git a/node_modules/cognito-at-edge/dist/index.js b/node_modules/cognito-at-edge/dist/index.js
index 10d5d9b..2e8f1f7 100644
--- a/node_modules/cognito-at-edge/dist/index.js
+++ b/node_modules/cognito-at-edge/dist/index.js
@@ -26,6 +26,7 @@ class Authenticator {
     _cookieSettingsOverrides;
     _logger;
     _jwtVerifier;
+    _redirectPath;
     constructor(params) {
         this._verifyParams(params);
         this._region = params.region;
@@ -53,6 +54,7 @@ class Authenticator {
         this._csrfProtection = params.csrfProtection;
         this._logoutConfiguration = params.logoutConfiguration;
         this._parseAuthPath = (params.parseAuthPath || '').replace(/^\//, '');
+        this._redirectPath = (params.redirectPath || '').replace(/^\//, '');
     }
     /**
      * Verify that constructor parameters are corrects.
@@ -223,7 +225,7 @@ class Authenticator {
      * @param  {String} location Path to redirection.
      * @return Lambda@Edge response.
      */
-    async _getRedirectResponse(tokens, domain, location) {
+    async _getRedirectResponse(tokens, domain, location, keepMethod = false) {
         const decoded = await this._jwtVerifier.verify(tokens.idToken);
         const username = decoded['cognito:username'];
         const usernameBase = `${this._cookieBase}.${username}`;
@@ -251,7 +253,7 @@ class Authenticator {
             cookies.push(cookie_1.Cookies.serialize(`${this._cookieBase}.${csrf_1.PKCE_COOKIE_NAME_SUFFIX}`, '', csrfCookieAttributes), cookie_1.Cookies.serialize(`${this._cookieBase}.${csrf_1.NONCE_COOKIE_NAME_SUFFIX}`, '', csrfCookieAttributes), cookie_1.Cookies.serialize(`${this._cookieBase}.${csrf_1.NONCE_HMAC_COOKIE_NAME_SUFFIX}`, '', csrfCookieAttributes));
         }
         const response = {
-            status: '302',
+            status: keepMethod ? '307' : '302',
             headers: {
                 'location': [{
                         key: 'Location',
@@ -510,7 +512,8 @@ class Authenticator {
         const { request } = event.Records[0].cf;
         const requestParams = (0, querystring_1.parse)(request.querystring);
         const cfDomain = request.headers.host[0].value;
-        const redirectURI = `https://${cfDomain}`;
+        const redirectURI = [`https://${cfDomain}`, this._redirectPath].filter((p) => p).join('/');
+        
         try {
             const tokens = this._getTokensFromCookie(request.headers.cookie);
             if (this._logoutConfiguration && request.uri.startsWith(this._logoutConfiguration.logoutUri)) {
@@ -530,7 +533,7 @@ class Authenticator {
                 if (tokens.refreshToken) {
                     this._logger.debug({ msg: 'Verifying idToken failed, verifying refresh token instead...', tokens, err });
                     return await this._fetchTokensFromRefreshToken(redirectURI, tokens.refreshToken)
-                        .then(tokens => this._getRedirectResponse(tokens, cfDomain, request.uri));
+                        .then(tokens => this._getRedirectResponse(tokens, cfDomain, request.uri, true));
                 }
                 else {
                     throw err;
